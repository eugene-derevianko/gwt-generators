#set($modelType = $tableContext.modelType.qualifiedSourceName)
package ${modelContext.modelType.package.name};

import com.google.gwt.core.client.GWT;
import com.google.gwt.user.cellview.client.Column;
import com.google.gwt.user.cellview.client.CellTable;
import com.github.symulakr.gwt.generators.client.celltable.Getter;


/**
* This is automatically generated class by:
* {@link ${generatorType.name} }
* This class is used for generating JS code of the Cell Table for
* {@link ${modelContext.modelType.qualifiedSourceName} }
*
* Do NOT Modify this class. It is regenerated every build
*
*/
public class ${implName} extends CellTable<${modelType}>
{

   public static CellTable.Resources res = GWT.create(${tableContext.resourceType.qualifiedSourceName}.class);

#foreach($columnContext in $tableContext.columns)
#set($returnType = $columnContext.returnType.qualifiedSourceName)
#set($getterName = $columnContext.getGetterName())

   public static final Getter<${modelType}, ${returnType}> ${getterName} = new Getter<${modelType}, ${returnType}>()
   {
      @Override
      public ${returnType} getValue(${modelType} model)
      {
#if($columnContext.isDefaultCell())
         return java.util.Objects.toString(model.${getterName}(), "");
#else
         return model.${getterName}();
#end
      }
   };

#end

   public ${implName}()
   {
      super(0, res);
      addColumns();
   }

#if($tableContext.hasHtmlHeader)
   private void addColumn(Column<${modelType}, ?> col, com.google.gwt.user.client.ui.UIObject header)
   {
      addColumn(col, new com.google.gwt.user.cellview.client.SafeHtmlHeader(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(header.getElement()
         .getInnerHTML())));
   }
#end

   private void addColumns()
   {
#foreach($columnContext in $tableContext.columns)
#set($returnType = $columnContext.returnType.qualifiedSourceName)
#set($getterName = $columnContext.getGetterName())
#set($columnName = $columnContext.columnName)

      Column<${modelType}, ${returnType}> ${columnName} = new Column<${modelType}, ${returnType}>(new ${columnContext.cellType.qualifiedSourceName}())
      {
         @Override
         public ${returnType} getValue(${modelType} object)
         {
            return ${getterName}.getValue(object);
         }
      };
#if ($columnContext.fieldUpdater)
      ${columnName}.setFieldUpdater(new ${columnContext.fieldUpdater.qualifiedSourceName}());
#end
#if ($columnContext.styleContext)
      ${columnName}.setHorizontalAlignment(${columnContext.styleContext.horizontalAlignment});
      ${columnName}.setVerticalAlignment(${columnContext.styleContext.verticalAlignment});
#end
#if($columnContext.reachHeader)
      addColumn(${columnName}, new ${columnContext.reachHeader.qualifiedSourceName}());
#else
      addColumn(${columnName}, "${columnContext.header}");
#end
#end

   }

}